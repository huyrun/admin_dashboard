// This file is generated by GoAdmin CLI adm.
package tables

import (
	"fmt"
	"github.com/huyrun/admin_dashboard/src/utils"
	"github.com/huyrun/go-admin/modules/db"
	"github.com/huyrun/go-admin/plugins/admin/modules/table"
	template2 "github.com/huyrun/go-admin/template"
	"gorm.io/gorm"
	"html/template"
)

var (
	cssTableNoWrap = template.CSS(`table{white-space: nowrap;}`)
)

func linkToOtherTable(tableName, value string) template.HTML {
	return template2.Default().
		Link().
		SetURL(fmt.Sprintf("/admin/info/%s/detail?__goadmin_detail_pk=%s", tableName, value)).
		SetContent(template.HTML(value)).
		OpenInNewTab().
		SetTabTitle(template.HTML(fmt.Sprintf("%s Detail(%s)", utils.CapitalizeFirst(tableName), value))).
		GetContent()
}

// Generators is a map of table models.
//
// The key of Generators is the prefix of table info url.
// The corresponding value is the Form and Table data.
//
// http://{{config.Domain}}:{{Port}}/{{config.Prefix}}/info/{{key}}
//
// example:
//
// "entity_comments" => /admin/info/entity_comments
// "entity_tags" => /admin/info/entity_tags
// "categories" => /admin/info/categories
// "entities" => /admin/info/entities
// "activities" => /admin/info/activities
// "goose_db_version" => /admin/info/goose_db_version
// "liked_entities" => /admin/info/liked_entities
// "user_relationships" => /admin/info/user_relationships
// "saved_entities" => /admin/info/saved_entities
// "wishes" => /admin/info/wishes
// "wish_stories" => /admin/info/wish_stories
// "tags" => /admin/info/tags
// "users" => /admin/info/users
//
// example end
func NewGenerators(db *gorm.DB, conn db.Connection) (map[string]table.Generator, error) {
	user, err := NewUser(db, conn)
	if err != nil {
		return nil, err
	}
	entity, err := NewEntity(db, conn)
	if err != nil {
		return nil, err
	}
	activity, err := NewActivity(user, entity)
	if err != nil {
		return nil, err
	}
	entityComments, err := NewEntityComments(user, entity)
	if err != nil {
		return nil, err
	}
	likedEntities, err := NewLikedEntities(user, entity)
	if err != nil {
		return nil, err
	}
	savedEntities, err := NewSavedEntities(user, entity)
	if err != nil {
		return nil, err
	}
	userRelationships, err := NewUserRelationships(user, entity)
	if err != nil {
		return nil, err
	}
	tag, err := NewTag(db, conn)
	if err != nil {
		return nil, err
	}
	entityTag, err := NewEntityTags(entity, tag)
	if err != nil {
		return nil, err
	}
	category, err := NewCategory(db, conn)
	if err != nil {
		return nil, err
	}
	wishStory, err := NewWishStory()
	if err != nil {
		return nil, err
	}
	wish, err := NewWish(user, entity, category)
	if err != nil {
		return nil, err
	}

	return map[string]table.Generator{
		"entity_comments":    entityComments.GetEntityCommentsTable,
		"entity_tags":        entityTag.GetEntityTagTable,
		"categories":         category.GetCategoriesTable,
		"entities":           entity.GetEntitiesTable,
		"activities":         activity.GetActivitiesTable,
		"goose_db_version":   GetGooseDbVersionTable,
		"liked_entities":     likedEntities.GetLikedEntitiesTable,
		"user_relationships": userRelationships.GetUserRelationshipsTable,
		"saved_entities":     savedEntities.GetSavedEntitiesTable,
		"wishes":             wish.GetWishTable,
		"wish_stories":       wishStory.GetWishStoryTable,
		"tags":               tag.GetTagsTable,
		"users":              user.GetUsersTable,

		// generators end
	}, nil
}
